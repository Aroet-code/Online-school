package main

import (
	"fmt"
	"log"
	"os"
	"time"

	"golang.org/x/crypto/bcrypt"
	"gorm.io/driver/mysql"
	"gorm.io/gorm"
)

var DB *gorm.DB

type User struct {
	ID            uint      `gorm:"primaryKey"`
	Username      string    `gorm:"uniqueIndex;not null;size:50"`
	Email         string    `gorm:"uniqueIndex;not null;size:100"`
	PasswordHash  string    `gorm:"not null" json:"-"`
	WalletBalance float64   `gorm:"default:0.0"`
	CreatedAt     time.Time `gorm:"autoCreateTime"`
}

type Course struct {
	ID       uint    `gorm:"primaryKey"`
	Title    string  `gorm:"not null;size:200"`
	Language string  `gorm:"not null;size:20"`
	Price    float64 `gorm:"not null"`
	PagePath string  `gorm:"not null"`
}

type Purchase struct {
	ID             uint      `gorm:"primaryKey"`
	UserID         uint      `gorm:"not null"`
	CourseID       uint      `gorm:"not null"`
	PurchaseAmount float64   `gorm:"not null"`
	PurchaseDate   time.Time `gorm:"autoCreateTime"`
	Status         string    `gorm:"default:'active';size:20"`
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è DSN (Data Source Name)
func getDSN() string {
	// –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
	// –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	dbUser := os.Getenv("DB_USER")
	if dbUser == "" {
		dbUser = "root"
	}

	dbPassword := os.Getenv("DB_PASSWORD")
	if dbPassword == "" {
		dbPassword = "password"
	}

	dbHost := os.Getenv("DB_HOST")
	if dbHost == "" {
		dbHost = "localhost"
	}

	dbPort := os.Getenv("DB_PORT")
	if dbPort == "" {
		dbPort = "3306"
	}

	dbName := os.Getenv("DB_NAME")
	if dbName == "" {
		dbName = "school_system"
	}

	// –§–æ—Ä–º–∞—Ç: user:password@tcp(host:port)/dbname?charset=utf8mb4&parseTime=True&loc=Local
	return fmt.Sprintf("%s:%s@tcp(%s:%s)/%s?charset=utf8mb4&parseTime=True&loc=Local",
		dbUser, dbPassword, dbHost, dbPort, dbName)
}

func HashPassword(password string) (string, error) {
	bytes, err := bcrypt.GenerateFromPassword([]byte(password), 14)
	return string(bytes), err
}

func CheckPasswordHash(password, hash string) bool {
	err := bcrypt.CompareHashAndPassword([]byte(hash), []byte(password))
	return err == nil
}

func InitDatabase() {
	dsn := getDSN()
	fmt.Printf("üìä –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL: %s\n", dsn)

	var err error
	DB, err = gorm.Open(mysql.Open(dsn), &gorm.Config{
		PrepareStmt: true,
	})
	if err != nil {
		log.Fatal("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ:", err)
	}

	sqlDB, err := DB.DB()
	if err != nil {
		log.Fatal("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è DB –æ–±—ä–µ–∫—Ç–∞:", err)
	}

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è MySQL
	sqlDB.SetMaxOpenConns(25)
	sqlDB.SetMaxIdleConns(10)
	sqlDB.SetConnMaxLifetime(5 * time.Minute)

	if err := sqlDB.Ping(); err != nil {
		log.Fatal("‚ùå –û—à–∏–±–∫–∞ ping –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:", err)
	}

	fmt.Println("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MySQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

	// –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	err = DB.Exec("CREATE DATABASE IF NOT EXISTS school_system CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci").Error
	if err != nil {
		log.Fatal("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:", err)
	}

	// –ú–∏–≥—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü
	err = DB.AutoMigrate(&User{}, &Course{}, &Purchase{})
	if err != nil {
		log.Fatal("‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:", err)
	}

	fmt.Println("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
	initCourses()
	createAdminUser()
}

func initCourses() {
	var count int64
	DB.Model(&Course{}).Count(&count)

	if count == 0 {
		courses := []Course{
			{Title: "Go –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö", Language: "go", Price: 5000.0, PagePath: "program_study/Go.html"},
			{Title: "Python –æ—Å–Ω–æ–≤—ã", Language: "python", Price: 6000.0, PagePath: "program_study/Python.html"},
			{Title: "C# –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", Language: "csharp", Price: 4500.0, PagePath: "program_study/Csharp.html"},
		}

		for _, course := range courses {
			DB.Create(&course)
		}
		fmt.Printf("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ %d –∫—É—Ä—Å–æ–≤\n", len(courses))
	}
}

func createAdminUser() {
	var adminCount int64
	DB.Model(&User{}).Where("username = ?", "admin").Count(&adminCount)

	if adminCount == 0 {
		hashedPassword, err := HashPassword("admin123")
		if err != nil {
			fmt.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∞: %v\n", err)
			return
		}

		admin := &User{
			Username:      "admin",
			Email:         "admin@school.ru",
			PasswordHash:  hashedPassword,
			WalletBalance: 200000000.0,
		}

		result := DB.Create(admin)
		if result.Error != nil {
			fmt.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∞: %v\n", result.Error)
		} else {
			fmt.Printf("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω: %s\n", admin.Username)
		}
	}
}

// –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
func GetAllCourses() ([]Course, error) {
	var courses []Course
	result := DB.Find(&courses)
	return courses, result.Error
}

func RegisterUser(username, email, password string) (*User, error) {
	hashedPassword, err := HashPassword(password)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è: %v", err)
	}

	user := &User{
		Username:     username,
		Email:        email,
		PasswordHash: hashedPassword,
	}

	result := DB.Create(user)
	if result.Error != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", result.Error)
	}

	return user, nil
}

func LoginUser(email, password string) (*User, error) {
	var user User
	result := DB.Where("email = ?", email).First(&user)
	if result.Error != nil {
		return nil, fmt.Errorf("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
	}

	if !CheckPasswordHash(password, user.PasswordHash) {
		return nil, fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")
	}

	return &user, nil
}

func GetUserByEmail(email string) (*User, error) {
	var user User
	result := DB.Where("email = ?", email).First(&user)
	if result.Error != nil {
		return nil, fmt.Errorf("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
	}
	return &user, nil
}

func GetUserByID(id uint) (*User, error) {
	var user User
	result := DB.First(&user, id)
	if result.Error != nil {
		return nil, fmt.Errorf("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
	}
	return &user, nil
}

func GetCourseByID(id uint) (*Course, error) {
	var course Course
	result := DB.First(&course, id)
	if result.Error != nil {
		return nil, fmt.Errorf("–∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
	}
	return &course, nil
}

func CreatePurchase(userID, courseID uint, amount float64) (*Purchase, error) {
	purchase := &Purchase{
		UserID:         userID,
		CourseID:       courseID,
		PurchaseAmount: amount,
		Status:         "active",
	}

	result := DB.Create(purchase)
	if result.Error != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∫—É–ø–∫–∏: %v", result.Error)
	}

	return purchase, nil
}

func CheckTables() error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
	tables := []string{"users", "courses", "purchases"}
	for _, table := range tables {
		result := DB.Exec("SELECT 1 FROM " + table + " LIMIT 1")
		if result.Error != nil {
			return fmt.Errorf("—Ç–∞–±–ª–∏—Ü–∞ %s –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", table)
		}
	}
	return nil
}
